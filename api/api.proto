syntax = "proto3";

option go_package = "./api";

package api;

/*
CODE GENERATION BASH COMMANDS:
Go:
protoc api/api.proto --go-grpc_out=. --go_out=.
Dart:
protoc lib/api/api.proto --dart_out=grpc:.
*/

//Response (universal response, when no return value required)
message Response{}

service Info{
    rpc User(InfIn.Adress) returns (InfOut.User);
    rpc UserSubscribe(InfIn.Adress) returns (stream InfOut.User);
    rpc HasTrades(InfIn.UserMarketAdr) returns (InfOut.Bool);
    rpc Market(InfIn.Adress) returns (InfOut.MarketInfo);
    rpc MarketSubscribe(InfIn.Adress) returns (stream InfOut.MarketInfo);
    rpc Search(InfIn.Text) returns (InfOut.Adresses);
    rpc Messages(InfIn.UserMarketAdr) returns (InfOut.Messages);
    rpc MessagesSubscribe(InfIn.UserMarketAdr) returns (stream InfOut.Messages);
    rpc CheckName(InfIn.Text) returns (InfOut.Bool);
    rpc NetMembers(InfIn.Empty) returns (InfOut.IPs);
}

message InfIn{
    message Adress{
        bytes adress = 1;
    }
    message Text{
        string text = 1;
    }
    message UserMarketAdr{
        bytes market_adress = 1;
        bytes user_adress = 2;
    }
    message Empty{}
}

message InfOut{
    message User{
        string public_name = 1;
        double balance = 2;
        bytes message_key = 3;
        repeated bytes market_adresses = 4;
        repeated double market_balances = 5;
    }
    message MarketInfo{
        string name = 1;
        bytes messageKey = 2;
        string imageLink = 3;
        string description = 4;
        double operationCount = 5;
        repeated Trade buys = 6;
        repeated Trade sells = 7;
        double activeBuys = 8;
        double activeSells = 9;
        double inputFee = 10;
        double outputFee = 11;
        string workTime = 12;
        double delimiter = 14;
    }
    message Adresses{
        repeated bytes marketAdresses = 1;
    }
    message Messages{
        repeated bytes messages = 1;
    }
    message Bool{
        bool value = 1;
    }
    message Trade{
        double offer = 1;
        double recieve = 2;
    }
    message IPs{
        repeated string adresses = 1;
    }
}




service User{
    rpc Create(UserRequests.Create) returns (Response);
    rpc Send(UserRequests.Send) returns (Response);
    rpc Message(UserRequests.Message) returns (Response);
    rpc Buy(UserRequests.Trade) returns (Response);
    rpc Sell(UserRequests.Trade) returns (Response);
    rpc CancelTrade(UserRequests.CancelTrade) returns (Response);
}

message UserRequests{
    message Create{
        bytes PublicKey = 1;
        bytes MesssageKey = 2;
        string PublicName = 3;
        bytes Sign = 4;
    }
    message Send{
        bytes PublicKey = 1;
        double SendAmount = 2;
        bytes RecieverAdress = 3;
        bytes Sign = 4;
    }
    message Message{
        bytes PublicKey = 1;
        bytes Adress = 2;
        bytes Message = 3;
        bytes Sign = 4;
    }
    message Trade{
        bytes PublicKey = 1;
        bytes Adress = 2;
        double Recieve = 3;
        double Offer = 4;
        bytes Sign = 5;
    }
    message CancelTrade{
        bytes PublicKey = 1;
        bytes MarketAdress = 2;
        bytes Sign = 3;
    }
}




service Market{
    rpc Spawn(MarketRequests.Create) returns (Response);
    rpc Update(MarketRequests.Update) returns (Response);
    rpc Deposit(MarketRequests.Deposit) returns (Response);
    rpc Withdrawal(MarketRequests.Withdrawal) returns (Response);
    rpc Reply(MarketRequests.Message) returns (Response);
}

message MarketRequests{
    message Create{
        bytes PublicKey = 1;
        bytes MesssageKey = 2;
        string Name = 3;
        string Img = 4;
        string Descr = 5;
        double inputFee = 6;
        double outputFee = 7;
        string workTime = 8;
        double delimiter = 9;
        bytes Sign = 10;
    }
    message Update{
        bytes PublicKey = 1;
        string Img = 2;
        string Descr = 3;
        double inputFee = 4;
        double outputFee = 5;
        string workTime = 6;
        bytes Sign = 7;
    }
    message Deposit{
        bytes PublicKey = 1;
        bytes UserAdress = 2;
        double Amount = 3;
        bytes Sign = 4;
    }
    message Withdrawal{
        bytes PublicKey = 1;
        bytes UserAdress = 2;
        double Amount = 3;
        bytes Sign = 4;
    }
    message Message{
        bytes PublicKey = 1;
        bytes Adress = 2;
        bytes Message = 3;
        bytes Sign = 4;
    }
}


service Connection{
    rpc Connect(ConnectionRequests.In) returns (stream ConnectionRequests.Out);
    rpc Pool(ConnectionRequests.Pool) returns (ConnectionRequests.Pool);
}

message ConnectionRequests{
    message In{
        bytes PublicKey = 1;
        string WebAdress = 2;
        bytes Sign = 3;
    }
    message Out{
        bytes Key = 1;
        bytes Value = 2;
    }
    message Pool{
        repeated string Values = 1;
    }
}

