// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserCreateClient is the client API for UserCreate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCreateClient interface {
	AddUser(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*Response, error)
}

type userCreateClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCreateClient(cc grpc.ClientConnInterface) UserCreateClient {
	return &userCreateClient{cc}
}

func (c *userCreateClient) AddUser(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.UserCreate/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCreateServer is the server API for UserCreate service.
// All implementations must embed UnimplementedUserCreateServer
// for forward compatibility
type UserCreateServer interface {
	AddUser(context.Context, *UserCreateRequest) (*Response, error)
	mustEmbedUnimplementedUserCreateServer()
}

// UnimplementedUserCreateServer must be embedded to have forward compatible implementations.
type UnimplementedUserCreateServer struct {
}

func (UnimplementedUserCreateServer) AddUser(context.Context, *UserCreateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserCreateServer) mustEmbedUnimplementedUserCreateServer() {}

// UnsafeUserCreateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCreateServer will
// result in compilation errors.
type UnsafeUserCreateServer interface {
	mustEmbedUnimplementedUserCreateServer()
}

func RegisterUserCreateServer(s grpc.ServiceRegistrar, srv UserCreateServer) {
	s.RegisterService(&UserCreate_ServiceDesc, srv)
}

func _UserCreate_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCreateServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserCreate/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCreateServer).AddUser(ctx, req.(*UserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCreate_ServiceDesc is the grpc.ServiceDesc for UserCreate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCreate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserCreate",
	HandlerType: (*UserCreateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserCreate_AddUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
