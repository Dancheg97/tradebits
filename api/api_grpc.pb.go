// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoClient interface {
	UserBalance(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*Balance, error)
	HasTrades(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*Bool, error)
	MarketInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InfoMarket, error)
	NetInfo(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*Links, error)
	GetMessages(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*Messages, error)
	TradeInfo(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*Trades, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) UserBalance(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := c.cc.Invoke(ctx, "/api.Info/UserBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) HasTrades(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/api.Info/HasTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) MarketInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InfoMarket, error) {
	out := new(InfoMarket)
	err := c.cc.Invoke(ctx, "/api.Info/MarketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) NetInfo(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*Links, error) {
	out := new(Links)
	err := c.cc.Invoke(ctx, "/api.Info/NetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetMessages(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*Messages, error) {
	out := new(Messages)
	err := c.cc.Invoke(ctx, "/api.Info/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) TradeInfo(ctx context.Context, in *PublicKey, opts ...grpc.CallOption) (*Trades, error) {
	out := new(Trades)
	err := c.cc.Invoke(ctx, "/api.Info/TradeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServer is the server API for Info service.
// All implementations must embed UnimplementedInfoServer
// for forward compatibility
type InfoServer interface {
	UserBalance(context.Context, *PublicKey) (*Balance, error)
	HasTrades(context.Context, *PublicKey) (*Bool, error)
	MarketInfo(context.Context, *Empty) (*InfoMarket, error)
	NetInfo(context.Context, *Offset) (*Links, error)
	GetMessages(context.Context, *Offset) (*Messages, error)
	TradeInfo(context.Context, *PublicKey) (*Trades, error)
	mustEmbedUnimplementedInfoServer()
}

// UnimplementedInfoServer must be embedded to have forward compatible implementations.
type UnimplementedInfoServer struct {
}

func (UnimplementedInfoServer) UserBalance(context.Context, *PublicKey) (*Balance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBalance not implemented")
}
func (UnimplementedInfoServer) HasTrades(context.Context, *PublicKey) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasTrades not implemented")
}
func (UnimplementedInfoServer) MarketInfo(context.Context, *Empty) (*InfoMarket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketInfo not implemented")
}
func (UnimplementedInfoServer) NetInfo(context.Context, *Offset) (*Links, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetInfo not implemented")
}
func (UnimplementedInfoServer) GetMessages(context.Context, *Offset) (*Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedInfoServer) TradeInfo(context.Context, *PublicKey) (*Trades, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeInfo not implemented")
}
func (UnimplementedInfoServer) mustEmbedUnimplementedInfoServer() {}

// UnsafeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServer will
// result in compilation errors.
type UnsafeInfoServer interface {
	mustEmbedUnimplementedInfoServer()
}

func RegisterInfoServer(s grpc.ServiceRegistrar, srv InfoServer) {
	s.RegisterService(&Info_ServiceDesc, srv)
}

func _Info_UserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).UserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Info/UserBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).UserBalance(ctx, req.(*PublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_HasTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).HasTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Info/HasTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).HasTrades(ctx, req.(*PublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_MarketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).MarketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Info/MarketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).MarketInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_NetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).NetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Info/NetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).NetInfo(ctx, req.(*Offset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Info/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetMessages(ctx, req.(*Offset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_TradeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).TradeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Info/TradeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).TradeInfo(ctx, req.(*PublicKey))
	}
	return interceptor(ctx, in, info, handler)
}

// Info_ServiceDesc is the grpc.ServiceDesc for Info service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Info_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserBalance",
			Handler:    _Info_UserBalance_Handler,
		},
		{
			MethodName: "HasTrades",
			Handler:    _Info_HasTrades_Handler,
		},
		{
			MethodName: "MarketInfo",
			Handler:    _Info_MarketInfo_Handler,
		},
		{
			MethodName: "NetInfo",
			Handler:    _Info_NetInfo_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _Info_GetMessages_Handler,
		},
		{
			MethodName: "TradeInfo",
			Handler:    _Info_TradeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	Message(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*Bool, error)
	Remmittance(ctx context.Context, in *RemmittanceRequest, opts ...grpc.CallOption) (*Bool, error)
	Trade(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Bool, error)
	CancelOrders(ctx context.Context, in *CancelOrdersRequest, opts ...grpc.CallOption) (*Bool, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Message(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/api.User/Message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Remmittance(ctx context.Context, in *RemmittanceRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/api.User/Remmittance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Trade(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/api.User/Trade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CancelOrders(ctx context.Context, in *CancelOrdersRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/api.User/CancelOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	Message(context.Context, *MessageRequest) (*Bool, error)
	Remmittance(context.Context, *RemmittanceRequest) (*Bool, error)
	Trade(context.Context, *Order) (*Bool, error)
	CancelOrders(context.Context, *CancelOrdersRequest) (*Bool, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Message(context.Context, *MessageRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Message not implemented")
}
func (UnimplementedUserServer) Remmittance(context.Context, *RemmittanceRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remmittance not implemented")
}
func (UnimplementedUserServer) Trade(context.Context, *Order) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trade not implemented")
}
func (UnimplementedUserServer) CancelOrders(context.Context, *CancelOrdersRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrders not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.User/Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Message(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Remmittance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemmittanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Remmittance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.User/Remmittance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Remmittance(ctx, req.(*RemmittanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Trade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Trade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.User/Trade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Trade(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CancelOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CancelOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.User/CancelOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CancelOrders(ctx, req.(*CancelOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Message",
			Handler:    _User_Message_Handler,
		},
		{
			MethodName: "Remmittance",
			Handler:    _User_Remmittance_Handler,
		},
		{
			MethodName: "Trade",
			Handler:    _User_Trade_Handler,
		},
		{
			MethodName: "CancelOrders",
			Handler:    _User_CancelOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// MarketClient is the client API for Market service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketClient interface {
	DecreaseOrder(ctx context.Context, in *DecreaseOrderRequest, opts ...grpc.CallOption) (*Bool, error)
	CloseOrder(ctx context.Context, in *CloseOrderRequest, opts ...grpc.CallOption) (*Bool, error)
}

type marketClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketClient(cc grpc.ClientConnInterface) MarketClient {
	return &marketClient{cc}
}

func (c *marketClient) DecreaseOrder(ctx context.Context, in *DecreaseOrderRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/api.Market/DecreaseOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketClient) CloseOrder(ctx context.Context, in *CloseOrderRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/api.Market/CloseOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServer is the server API for Market service.
// All implementations must embed UnimplementedMarketServer
// for forward compatibility
type MarketServer interface {
	DecreaseOrder(context.Context, *DecreaseOrderRequest) (*Bool, error)
	CloseOrder(context.Context, *CloseOrderRequest) (*Bool, error)
	mustEmbedUnimplementedMarketServer()
}

// UnimplementedMarketServer must be embedded to have forward compatible implementations.
type UnimplementedMarketServer struct {
}

func (UnimplementedMarketServer) DecreaseOrder(context.Context, *DecreaseOrderRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecreaseOrder not implemented")
}
func (UnimplementedMarketServer) CloseOrder(context.Context, *CloseOrderRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseOrder not implemented")
}
func (UnimplementedMarketServer) mustEmbedUnimplementedMarketServer() {}

// UnsafeMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketServer will
// result in compilation errors.
type UnsafeMarketServer interface {
	mustEmbedUnimplementedMarketServer()
}

func RegisterMarketServer(s grpc.ServiceRegistrar, srv MarketServer) {
	s.RegisterService(&Market_ServiceDesc, srv)
}

func _Market_DecreaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecreaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).DecreaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Market/DecreaseOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).DecreaseOrder(ctx, req.(*DecreaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Market_CloseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServer).CloseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Market/CloseOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServer).CloseOrder(ctx, req.(*CloseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Market_ServiceDesc is the grpc.ServiceDesc for Market service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Market_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Market",
	HandlerType: (*MarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DecreaseOrder",
			Handler:    _Market_DecreaseOrder_Handler,
		},
		{
			MethodName: "CloseOrder",
			Handler:    _Market_CloseOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
