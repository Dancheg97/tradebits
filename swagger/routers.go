/*
 * TradeBits
 *
 * In this API description you can find description of ways markets communicate with each other and users. Each sign of message user send to market is additionally reinforced by market name as indtent to ensure markets will not try to proceed same operations with users on other markets. That is not mention in API, but implemented on server and client sides. Each procedure on specific market need to be reinforced by market name in senders message, to prevent mimic behavior by markets collecting data. That will guarantee, that only owner of the private key is able to process transactions on specific market.  ## API notions: - **ukey** - public key of the user, which is used by user to send messages and process operations on a related market  - **mkey** - public key of the market, which can be used to encrypt and verify messages - **hkey** - key of host added for additional security, for message verification. This is the public key of the node accepting the request 
 *
 * API version: 1.0.2
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/",
		Index,
	},

	Route{
		"InfoMarketGet",
		strings.ToUpper("Get"),
		"/info/market",
		InfoMarketGet,
	},

	Route{
		"InfoNetGet",
		strings.ToUpper("Get"),
		"/info/net",
		InfoNetGet,
	},

	Route{
		"MarketCloseDelete",
		strings.ToUpper("Delete"),
		"/market/close",
		MarketCloseDelete,
	},

	Route{
		"MarketCreatePut",
		strings.ToUpper("Put"),
		"/market/create",
		MarketCreatePut,
	},

	Route{
		"MarketDecreasePost",
		strings.ToUpper("Post"),
		"/market/decrease",
		MarketDecreasePost,
	},

	Route{
		"MarketRelatedGet",
		strings.ToUpper("Get"),
		"/market/related",
		MarketRelatedGet,
	},

	Route{
		"OperatorDepositPost",
		strings.ToUpper("Post"),
		"/operator/deposit",
		OperatorDepositPost,
	},

	Route{
		"OperatorMessagePut",
		strings.ToUpper("Put"),
		"/operator/message",
		OperatorMessagePut,
	},

	Route{
		"OperatorWithdrawalPost",
		strings.ToUpper("Post"),
		"/operator/withdrawal",
		OperatorWithdrawalPost,
	},

	Route{
		"UserBalanceGet",
		strings.ToUpper("Get"),
		"/user/balance",
		UserBalanceGet,
	},

	Route{
		"UserCancelordersPost",
		strings.ToUpper("Post"),
		"/user/cancelorders",
		UserCancelordersPost,
	},

	Route{
		"UserCreatePut",
		strings.ToUpper("Put"),
		"/user/create",
		UserCreatePut,
	},

	Route{
		"UserMessagePut",
		strings.ToUpper("Put"),
		"/user/message",
		UserMessagePut,
	},

	Route{
		"UserMessagesGet",
		strings.ToUpper("Get"),
		"/user/messages",
		UserMessagesGet,
	},

	Route{
		"UserOrderPost",
		strings.ToUpper("Post"),
		"/user/order",
		UserOrderPost,
	},

	Route{
		"UserTradesGet",
		strings.ToUpper("Get"),
		"/user/trades",
		UserTradesGet,
	},
}
