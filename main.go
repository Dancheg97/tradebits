/*
 * TradeBits
 *
 * In this API description you can find description of ways markets communicate with each other and users.   Each sign of message user send to market is additionally reinforced by market name as indtent to ensure markets will not try to proceed same operations with users on other markets. That is not mention in API, but implemented on server and client sides.   Each procedure on specific market need to be reinforced by market name in senders message, to prevent mimic behavior by markets collecting data. That will guarantee, that only owner of the private key is able to process transactions on specific market.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package main

import (
	"log"
	"net/http"
	"os"

	"tradebits/swagger"

	"github.com/joho/godotenv"
)

func readConfigField(field string) string {
	envar, found := os.LookupEnv("MARKET_PORT")
	if !found {
		log.Fatal("problem loading .ENV field", found)
	}
	return envar
}

func init() {
	if err := godotenv.Load(); err != nil {
		log.Panic("No .env file found")
	}
	swagger.Config = swagger.Configuration{
		MARKET_PORT:       readConfigField("MARKET_PORT"),
		MARKET_NAME:       readConfigField("MARKET_NAME"),
		MARKET_DESCR:      readConfigField("MARKET_DESCR"),
		MARKET_IMG:        readConfigField("MARKET_IMG"),
		MARKET_WORKTIME:   readConfigField("MARKET_WORKTIME"),
		MARKET_FEE:        readConfigField("MARKET_FEE"),
		MARKET_DELIMITER:  readConfigField("MARKET_DELIMITER"),
		MARKET_PRIVATEKEY: readConfigField("MARKET_PRIVATEKEY"),
		MARKET_PUBLICKEY:  readConfigField("MARKET_PUBLICKEY"),
	}
}

func main() {
	log.Printf("Server started")

	router := swagger.NewRouter()

	log.Fatal(http.ListenAndServe(":8080", router))
}
